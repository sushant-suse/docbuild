name: CI/Test
on:
  workflow_dispatch:
    inputs:
      JING_VERSION:
        description: "Jing version to use"
        required: false
        default: "20091111"  # Default value
  pull_request:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'tests/**'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
permissions:
  contents: read
  packages: read

jobs:
  test-ubuntu:
    name: ubuntu-python-${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: &python-matrix
          - '3.12'
          - '3.13'
          # - '3.14'
    container:
      image: registry.opensuse.org/documentation/containers/15.6/opensuse-daps-toolchain:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Get dependencies
        run: |
          rpm -q daps \
            suse-xsl-stylesheets \
            suse-xsl-stylesheets-sbp \
            geekodoc \
            docbook-xsl-stylesheets \
            docbook-xsl-ns \
            xmlgraphics-fop \
            git \
            ditaa \
            libreoffice-draw \
            novdoc \
            ruby2.5-rubygem-asciidoctor \
            curl \
            tar \
            w3m \
            jq \
            rsvg-convert \
            openssh-clients || true
            
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        id: setup-uv
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          pip install uv

      - name: Print the installed version
        run: echo "Installed uv version is $(.venv/bin/uv --version)"

      - name: Install dependencies
        run: |
          source .venv/bin/activate
          uv sync --frozen --group devel

      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest -vv

  test-macos:
    name: macos-python-${{ matrix.python-version }}
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: *python-matrix

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Set up Python on macOS environment
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      # Install uv and project dependencies inside a virtual environment
      - name: Install uv and dependencies
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          pip install uv
          uv pip install --editable . --group devel
      
      # Install macOS-specific external tools (such as XML parsers and Java)
      - name: Install external tools (macOS)
        run: |
          brew install libxml2 libxslt openjdk

          # Define the version and URL for jing.jar, using the input version from workflow_dispatch
          JING_VERSION="${{ github.event.inputs.JING_VERSION || '20091111' }}"
          JING_URL="https://repo1.maven.org/maven2/com/thaiopensource/jing/${JING_VERSION}/jing-${JING_VERSION}.jar"

          # Download jing.jar file for XML validation
          curl -sL -f $JING_URL -o jing.jar
          
          # Ensures the jar file is successfully downloaded, else exit with error
          if [ ! -f jing.jar ]; then
              echo "::error file=$JING_URL:: Failed to download jing.jar"
              exit 1
          fi

          # Create a bash script to run jing.jar easily from the command line
          echo '#!/bin/bash' > jing
          echo 'java -jar jing.jar "$@"' >> jing
          chmod +x jing

          # Add paths of installed tools to GitHub Actions environment for easy access
          echo "$(pwd)" >> $GITHUB_PATH
          echo "/opt/homebrew/opt/openjdk/bin" >> $GITHUB_PATH
          echo "/opt/homebrew/opt/libxml2/bin" >> $GITHUB_PATH
          echo "/opt/homebrew/opt/libxslt/bin" >> $GITHUB_PATH

      # Run the tests using pytest inside the created virtual environment
      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest -vv